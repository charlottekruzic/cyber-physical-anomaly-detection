import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from pickleshare import PickleShareDB
import os

# Chargement des donn√©es
data_dir = "prep_data"
db = PickleShareDB(os.path.join(data_dir, "kity"))

# R√©cup√©rer les r√©sultats PCA
pca_results = db['pca_results_phy']

# Configuration de la page
st.set_page_config(page_title="Analyse en Composantes Principales", layout="wide")

# Titre principal
st.title("üîç Analyse en Composantes Principales des Donn√©es Physiques")

# Introduction explicative
st.markdown("""
Cette page pr√©sente les r√©sultats de l'Analyse en Composantes Principales (ACP) appliqu√©e aux donn√©es physiques.
L'ACP permet de r√©duire la dimensionnalit√© des donn√©es tout en conservant l'information pertinente et 
de visualiser les relations entre les diff√©rentes caract√©ristiques.
""")

# Division en colonnes pour la variance expliqu√©e
col1, col2 = st.columns(2)

with col1:
    st.subheader("Variance expliqu√©e par composante")
    
    # Graphique de la variance expliqu√©e
    fig_variance = go.Figure()
    
    # Graphique en barres pour la variance individuelle
    fig_variance.add_trace(
        go.Bar(
            x=pca_results['explained_variance']['Component'],
            y=pca_results['explained_variance']['Explained_Variance'],
            name='Individuelle',
            text=pca_results['explained_variance']['Explained_Variance'].round(3),
            textposition='auto',
        )
    )
    
    # Courbe pour la variance cumul√©e
    fig_variance.add_trace(
        go.Scatter(
            x=pca_results['explained_variance']['Component'],
            y=pca_results['explained_variance']['Cumulative_Variance'],
            name='Cumul√©e',
            line=dict(color='red'),
            mode='lines+markers'
        )
    )
    
    fig_variance.update_layout(
        title='Ratio de variance expliqu√©e par composante principale',
        xaxis_title='Composante Principale',
        yaxis_title='Ratio de variance expliqu√©e',
        showlegend=True
    )
    
    st.plotly_chart(fig_variance, use_container_width=True)

with col2:
    st.subheader("Matrice des composantes")
    
    # Heatmap des composantes
    fig_components = px.imshow(
        pca_results['components_matrix'],
        title='Matrice des composantes principales',
        aspect='auto',
        color_continuous_scale='RdBu'
    )
    
    st.plotly_chart(fig_components, use_container_width=True)

# Visualisations interactives
st.header("Visualisations des donn√©es projet√©es")

# S√©lection du type de visualisation
viz_type = st.radio(
    "Choisissez le type de visualisation :",
    ["Classification par type d'attaque", "Classification binaire (Normal vs Attaque)"]
)

# Colonne pour les options de visualisation
col1, col2 = st.columns([1, 3])

with col1:
    st.subheader("Options")
    dim_viz = st.radio(
        "Dimensions :",
        ["2D", "3D"]
    )

with col2:
    if viz_type == "Classification par type d'attaque":
        if dim_viz == "2D":
            fig = px.scatter(
                pca_results['transformed_data'],
                x='PC1',
                y='PC2',
                color='Label',
                title='Projection ACP - Deux premi√®res composantes',
                hover_data=['source']
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            fig = px.scatter_3d(
                pca_results['transformed_data'],
                x='PC1',
                y='PC2',
                z='PC3',
                color='Label',
                title='Projection ACP - Trois premi√®res composantes',
                hover_data=['source']
            )
            st.plotly_chart(fig, use_container_width=True)
    else:
        if dim_viz == "2D":
            fig = px.scatter(
                pca_results['transformed_data'],
                x='PC1',
                y='PC2',
                color='Label_n',
                title='Projection ACP - Classification binaire',
                hover_data=['source'],
                color_discrete_map={True: 'red', False: 'blue'},
                labels={'Label_n': 'Attaque'}
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            fig = px.scatter_3d(
                pca_results['transformed_data'],
                x='PC1',
                y='PC2',
                z='PC3',
                color='Label_n',
                title='Projection ACP - Classification binaire',
                hover_data=['source'],
                color_discrete_map={True: 'red', False: 'blue'},
                labels={'Label_n': 'Attaque'}
            )
            st.plotly_chart(fig, use_container_width=True)

# Analyse des caract√©ristiques principales
st.header("Analyse des caract√©ristiques principales")

# S√©lection de la composante √† analyser
selected_pc = st.selectbox(
    "S√©lectionnez une composante principale :",
    [f"PC{i+1}" for i in range(len(pca_results['components_matrix']))]
)

pc_index = int(selected_pc[2]) - 1
feature_importance = pd.DataFrame({
    'Feature': pca_results['feature_names'],
    'Importance': np.abs(pca_results['pca_model'].components_[pc_index])
}).sort_values('Importance', ascending=False)

# Affichage des caract√©ristiques les plus importantes
fig_features = px.bar(
    feature_importance.head(10),
    x='Feature',
    y='Importance',
    title=f'Top 10 des caract√©ristiques contribuant √† {selected_pc}'
)
st.plotly_chart(fig_features, use_container_width=True)

# Informations suppl√©mentaires
st.sidebar.header("‚ÑπÔ∏è Informations")
st.sidebar.markdown("""
### √Ä propos de l'ACP
L'Analyse en Composantes Principales est une technique de r√©duction de dimensionnalit√© qui :
- Trouve les directions de variance maximale dans les donn√©es
- Cr√©e de nouvelles caract√©ristiques non corr√©l√©es
- Permet de visualiser les donn√©es en 2D ou 3D

### Interpr√©tation
- Les points proches dans la visualisation ont des caract√©ristiques similaires
- La s√©paration des points par couleur indique la qualit√© de la discrimination entre les classes
- Les composantes principales sont ordonn√©es par importance d√©croissante
""")